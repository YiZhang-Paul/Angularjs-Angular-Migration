Q: what does the application do?
A: provide one single place to view, search and manage live stream channels from two major game streaming sites: Twitch and Mixer (and maybe more).

Q: what are the main features of the application?
A: there are six main features:
    1. user authentication
        (1). users can register accounts using username/password
        (2). users can login through Google/Twitch/Mixer (OAuth 2.0)
    2. display available live streams
        (1). display available games
        (2). display available channels for each game
    3. search live streams
        (1). search by game
        (2). search by channel
        (3). search items affect content suggestions
    4. view history
        (1). list view histories of users
        (2). users can delete histories
        (3). users can bookmark/follow channels through view history
        (4). view histories affect content suggestions
    5. bookmark/follow channels
        (1). users can bookmark/follow channels
        (2). users can remove bookmarked/followed channels
        (3). users get notification when bookmarked/followed channels go live
    6. Content suggestion
        (1). users will get content suggestions when they login

Q: which portion will be written in AngularJs?
A: anything other than notification for bookmarked/followed channels and content suggestions will be written in AngularJs.

Q: which portion will be written in Angular 2+?
A: anything that is not written with AngularJs.

Q: what runs on the back-end?
A: express.js backed with MongoDB (using mongoose).

Q: which third-party apis are used by the application?
A: (1). Twitch API: https://dev.twitch.tv/docs/api/reference/
   (2). Mixer API: https://dev.mixer.com/rest/index.html

Other notes:

1. data flow:

    user hits landing page
        if authenticated
            check user preference (base on search and view history) and create suggestions
            show content suggestions and a link to browse games page
        else
            fetch game lists and view count from third-party apis
            combine fetched lists into a single list with view count
            show combined (with duplicate removed) list in browse games page

    user clicks login/sign up
        show login page with options to login through Google/Twitch/Mixer or username/password
        show link to sign up page if user does not have means to login

    user searches a game or channel in search box
        suggested games/channels appear as user types

    user clicks a game or channel through browse games page or search box
        if user clicks a game
            fetch channels and view count from third-party apis
            show channels
        if user clicks a channel
            show channel

    user clicks on view history tab
        show view histories with options to follow channel and remove history

    user clicks on bookmark tab
        show bookmarked/followed channels with their status (live/offline)

2. authentication

(1). on first request - client side must send login credentials (username/password; oauth-2 credentials)
(2). server receives credentials and authenticate
    if succeed
        create a JWT and send it back to client side with response
    else
        redirect to login and display error message
(3). client side receives JWT and store it in local storage
(4). client side send JWT with every request to server
(5). server verifies JWT
    if JWT is valid
        process request
    else
        return error

3. entities/models - format: name (fields in models) & (fields added on the fly)

game (id, name, search_api_keys : [{ provider_id, provider_game_id, provider_game_name }], genre) & (image, view count)
channel (id, provider_id, provider_channel_id) & (title, streamer_name, game_id, game_name, image, view count)
user (id, role, name, password, email, oauth_provider, oauth_identifier, view_histories : url, bookmarks : url, keywords : [keywords])
view_history (id, channel_id, title, streamer_name, game_id, game_name, image) & (is_live)
bookmark (id, channel_id, title, streamer_name, playlist) & (is_live)
------- (hidden below)
provider (id, name, urls : { site, search_game, search_channel })
keywords (date, game_searches : [{ game_id, count }])
counter

4. APIs

api/v1/authenticate
    (1). POST - authenticate user credentials (200 OK/401 Unauthorized)
    (2). otherwise - 405 Method Not Allowed

api/v1/games
    (1). GET - retrieve list of all games (200 OK)
    (2). GET ?name=[string] - partial or full game name, letter casing ignored (200 OK)
    (3). GET ?fields=[string] - comma separated fields to be included in response (200 OK)
    (4). GET ?limit=[10<=integer<=100] - total results in the list (200 OK)
    (5). GET ?page=[0<=integer] - result pagination, default value is 0 (200 OK)
    (6). GET ?orderByViewCount=[boolean] - order by view counts in descending order (200 OK)
    (7). otherwise - 405 Method Not Allowed

api/v1/games/:id
    (1). GET - retrieve details of particular game (name, view count, genre, channels, etc) (200 OK/404 Not Found)
    (2). GET ?fields=[string] - comma separated fields to be included in response (200 OK/404 Not Found)
    (3). otherwise - 405 Method Not Allowed

api/v1/channels
    (1). GET - retrieve list of live channels (200 OK)
    (2). GET ?gameId=[integer] - id to retrieve live channels relate to a particular game
    (3). GET ?gameName=[string] (ignored when gameId is specified) - partial/full game name, letter casing ignored (200 OK)
    (4). GET ?fields=[string] - comma separated fields to be included in response (200 OK)
    (5). GET ?limit=[10<=integer<=100] - total results in the list (200 OK)
    (6). GET ?page=[0<=integer] - result pagination, default value is 0 (200 OK)
    (7). GET ?orderByViewCount=[boolean] - order by view counts in descending order
    (8). otherwise - 405 Method Not Allowed

api/v1/user - needs authentication (except for POST)
    (1). GET - retrieve user record (200 OK/401 Unauthorized/403 Forbidden/404 Not Found)
    (2). POST - create user record (201 Created/400 Bad Request)
    (3). PUT - update user record (204 No Content/401 Unauthorized/403 Forbidden/404 Not Found)
    (4). otherwise - 405 Method Not Allowed

api/v1/user/histories - needs authentication
    (1). GET - retrieve user view histories (200 OK/401 Unauthorized/403 Forbidden/404 Not Found)
    (2). POST - create user view histories (201 Created/401 Unauthorized/403 Forbidden)
    (3). DELETE - delete user view histories (200 OK/401 Unauthorized/403 Forbidden/404 Not Found)
    (4). otherwise - 405 Method Not Allowed

api/v1/user/histories/:id - needs authentication
    (1). GET - retrieve user history (200 OK/401 Unauthorized/403 Forbidden/404 Not Found)
    (2). DELETE - delete user history (204 No Content/401 Unauthorized/403 Forbidden/404 Not Found)
    (3). otherwise - 405 Method Not Allowed

api/v1/user/bookmarks - needs authentication
    (1). GET - retrieve user bookmarks (200 OK/401 Unauthorized/403 Forbidden/404 Not Found)
    (2). POST - create user bookmarks (201 Created/401 Unauthorized/403 Forbidden)
    (3). DELETE - delete user bookmarks (200 OK/401 Unauthorized/403 Forbidden/404 Not Found)
    (4). otherwise - 405 Method Not Allowed

api/v1/user/bookmarks/:id - needs authentication
    (1). GET - retrieve user bookmark (200 OK/401 Unauthorized/403 Forbidden/404 Not Found)
    (2). PUT - update user bookmark (204 No Content/401 Unauthorized/403 Forbidden/404 Not Found)
    (3). DELETE - delete user bookmark (204 No Content/401 Unauthorized/403 Forbidden/404 Not Found)
    (4). otherwise - 405 Method Not Allowed
